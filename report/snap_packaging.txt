
1. Binary size - ?

2. Dependency resolution / Conflict resolution - Ubuntu Snappy requires the developer to bundle the necessary libraries in the app snap through the YAML configuration file. This design choice has three main advantages. First, libraries aren't shared between different applications leading to better security isolation. Second, this also leads to simpler dependency resolution -- multiple applications using different versions of the same library can co-exist peacefully. Finally, it eases migration and allows frequent updates. The OS can be upgraded without breaking dependencies for legacy applications. Conversely, users can also access the latest app versions without needing to upgrade their OS. This can be very useful for users where their IT Departments enterprises do not allow OS upgrades without long internal testing cycles.

The main disadvantage of this choice is that more space is consumed by libraries which aren't shared anymore. In fact, we can have multiple copies of the same library for different applications residing in the system. This issue is probably less of a concern for servers or user PCs which have plenty of space, and more relevant for space-constrained systems such as smartphones.

3. Distribution Mechanism - Application snaps can be downloaded through the Ubuntu Snap Store. Additionally, users can also use kernel snaps which provide the kernel and drivers, OS snaps which provide the rest of the operating system and gadget snaps which provide boot, kernel, OS and application configuration. Each of these snaps can be updated indepedently of each other.

Ubuntu Store snaps are considered untrusted and thus are run in a restricted sandbox. This allows users to run apps from unknown vendors without needing to worry about security concerns. When a new application version is uploaded to the Ubuntu Store, the snap undergoes automatic reviews. Part of this review process involves examining the snap’s requested interfaces in the YAML file. If a snap passes the review, it can be made immediately available to users and devices. If it does not pass review, it is blocked and the uploader may request a manual review. The store’s upload policies and the security policies associated with an individual snap’s declared interfaces work together to ensure that users and devices are protected from malformed or malicious snaps. Kernel and gadget snaps require manual review.

4. Packaging from a developer's perspective - The author who worked with Snaps found the YAML packaging format reasonably easy to use. He was able to package the Minebench test suite and nginx relatively easily. In his opinion, the YAML format is not too different from the Dockerfile format required for Docker containers. The YAML format does lack some fine-grained control features such as exposing of specific TCP/UDP ports supported by Dockerfiles, but will probably be added in the future as Ubuntu Snappy matures.
